# tests/text/test_case.py
# =======================
#
# Copying
# -------
#
# Copyright (c) 2020 none authors and contributors.
#
# This file is part of the *none* project.
#
# None is a free software project. You can redistribute it and/or
# modify it following the terms of the MIT License.
#
# This software project is distributed *as is*, WITHOUT WARRANTY OF ANY
# KIND; including but not limited to the WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE and NONINFRINGEMENT.
#
# You should have received a copy of the MIT License along with
# *none*. If not, see <http://opensource.org/licenses/MIT>.
#
"""Test cases for the :mod:`none.text.case` module."""
import pytest

import none


# fmt: off
@pytest.mark.parametrize("string,expected", [
    ("",        ""),
    ("4",       "4"),
    ("4F",      "4-f"),
    ("4f",      "4-f"),
    ("4Foo",    "4-foo"),
    ("4foo",    "4-foo"),
    ("4FooB",   "4-foo-b"),
    ("4fooB",   "4-foo-b"),
    ("4FOOB",   "4-foob"),
    ("4foob",   "4-foob"),
    ("4fOOBar", "4-f-oo-bar"),
    ("4FoOBar", "4-fo-o-bar"),
    ("4foOBar", "4-fo-o-bar"),
    ("4FOOBar", "4-foo-bar"),
    ("4FooBAR", "4-foo-bar"),
    ("4FooBar", "4-foo-bar"),
    ("4fooBAR", "4-foo-bar"),
    ("4fooBar", "4-foo-bar"),
    ("F",       "f"),
    ("f",       "f"),
    ("F4",      "f4"),
    ("f4",      "f4"),
    ("Fo4OBar", "fo4-o-bar"),
    ("fo4OBar", "fo4-o-bar"),
    ("Foo",     "foo"),
    ("foo",     "foo"),
    ("Foo4",    "foo4"),
    ("foo4",    "foo4"),
    ("FOO4B",   "foo4-b"),
    ("Foo4B",   "foo4-b"),
    ("fOO4B",   "f-oo4-b"),
    ("foo4B",   "foo4-b"),
    ("fOO4Bar", "f-oo4-bar"),
    ("FoO4Bar", "fo-o4-bar"),
    ("foO4Bar", "fo-o4-bar"),
    ("FOO4Bar", "foo4-bar"),
    ("Foo4BAR", "foo4-bar"),
    ("Foo4Bar", "foo4-bar"),
    ("foo4BAR", "foo4-bar"),
    ("foo4Bar", "foo4-bar"),
    ("fOOB",    "f-oob"),
    ("FooB",    "foo-b"),
    ("fooB",    "foo-b"),
    ("FOOB",    "foob"),
    ("fOOB4",   "f-oob4"),
    ("FooB4",   "foo-b4"),
    ("fooB4",   "foo-b4"),
    ("FOOB4",   "foob4"),
    ("fOOBar",  "f-oo-bar"),
    ("FoOBar",  "fo-o-bar"),
    ("foOBar",  "fo-o-bar"),
    ("FOOBar",  "foo-bar"),
    ("FooBAR",  "foo-bar"),
    ("FooBar",  "foo-bar"),
    ("fooBAR",  "foo-bar"),
    ("fooBar",  "foo-bar"),
    ("fOOBar4", "f-oo-bar4"),
    ("FoOBar4", "fo-o-bar4"),
    ("foOBar4", "fo-o-bar4"),
    ("FOOBar4", "foo-bar4"),
    ("FooBAR4", "foo-bar4"),
    ("FooBar4", "foo-bar4"),
    ("fooBAR4", "foo-bar4"),
    ("fooBar4", "foo-bar4"),
])
# fmt: on
def test_camel2kebab_expected(string: str, expected: str):
    """Test :func:`none.text.case.camel2kebab` for expected output."""
    assert none.text.case.camel2kebab(string) == expected


# fmt: off
@pytest.mark.parametrize("string,expected", [
    ("",        ""),
    ("4",       "4"),
    ("4F",      "4_f"),
    ("4f",      "4_f"),
    ("4Foo",    "4_foo"),
    ("4foo",    "4_foo"),
    ("4FooB",   "4_foo_b"),
    ("4fooB",   "4_foo_b"),
    ("4FOOB",   "4_foob"),
    ("4foob",   "4_foob"),
    ("4fOOBar", "4_f_oo_bar"),
    ("4FoOBar", "4_fo_o_bar"),
    ("4foOBar", "4_fo_o_bar"),
    ("4FOOBar", "4_foo_bar"),
    ("4FooBAR", "4_foo_bar"),
    ("4FooBar", "4_foo_bar"),
    ("4fooBAR", "4_foo_bar"),
    ("4fooBar", "4_foo_bar"),
    ("F",       "f"),
    ("f",       "f"),
    ("F4",      "f4"),
    ("f4",      "f4"),
    ("Fo4OBar", "fo4_o_bar"),
    ("fo4OBar", "fo4_o_bar"),
    ("Foo",     "foo"),
    ("foo",     "foo"),
    ("Foo4",    "foo4"),
    ("foo4",    "foo4"),
    ("FOO4B",   "foo4_b"),
    ("Foo4B",   "foo4_b"),
    ("fOO4B",   "f_oo4_b"),
    ("foo4B",   "foo4_b"),
    ("fOO4Bar", "f_oo4_bar"),
    ("FoO4Bar", "fo_o4_bar"),
    ("foO4Bar", "fo_o4_bar"),
    ("FOO4Bar", "foo4_bar"),
    ("Foo4BAR", "foo4_bar"),
    ("Foo4Bar", "foo4_bar"),
    ("foo4BAR", "foo4_bar"),
    ("foo4Bar", "foo4_bar"),
    ("fOOB",    "f_oob"),
    ("FooB",    "foo_b"),
    ("fooB",    "foo_b"),
    ("FOOB",    "foob"),
    ("fOOB4",   "f_oob4"),
    ("FooB4",   "foo_b4"),
    ("fooB4",   "foo_b4"),
    ("FOOB4",   "foob4"),
    ("fOOBar",  "f_oo_bar"),
    ("FoOBar",  "fo_o_bar"),
    ("foOBar",  "fo_o_bar"),
    ("FOOBar",  "foo_bar"),
    ("FooBAR",  "foo_bar"),
    ("FooBar",  "foo_bar"),
    ("fooBAR",  "foo_bar"),
    ("fooBar",  "foo_bar"),
    ("fOOBar4", "f_oo_bar4"),
    ("FoOBar4", "fo_o_bar4"),
    ("foOBar4", "fo_o_bar4"),
    ("FOOBar4", "foo_bar4"),
    ("FooBAR4", "foo_bar4"),
    ("FooBar4", "foo_bar4"),
    ("fooBAR4", "foo_bar4"),
    ("fooBar4", "foo_bar4"),
])
# fmt: on
def test_camel2snake_expected(string: str, expected: str):
    """Test :func:`none.text.case.camel2snake` for expected output."""
    assert none.text.case.camel2snake(string) == expected


# fmt: off
@pytest.mark.parametrize("string,capitalize,expected", [
    ("",           True,  ""),
    ("4",          True,  "4"),
    ("4-f",        True,  "4F"),
    ("4-F",        True,  "4F"),
    ("4-fo-o-bar", True,  "4FoOBar"),
    ("4-FO-O-BAR", True,  "4FoOBar"),
    ("4-foo",      True,  "4Foo"),
    ("4-FOO",      True,  "4Foo"),
    ("4-foo-b",    True,  "4FooB"),
    ("4-FOO-B",    True,  "4FooB"),
    ("4-foo-bar",  True,  "4FooBar"),
    ("4-FOO-BAR",  True,  "4FooBar"),
    ("4-foob",     True,  "4Foob"),
    ("4-FOOB",     True,  "4Foob"),
    ("f",          True,  "F"),
    ("F",          True,  "F"),
    ("f4",         True,  "F4"),
    ("F4",         True,  "F4"),
    ("fo-o-bar",   True,  "FoOBar"),
    ("FO-O-BAR",   True,  "FoOBar"),
    ("fo-o-bar4",  True,  "FoOBar4"),
    ("FO-O-BAR4",  True,  "FoOBar4"),
    ("fo-o4-bar",  True,  "FoO4Bar"),
    ("FO-O4-BAR",  True,  "FoO4Bar"),
    ("fo4-o-bar",  True,  "Fo4OBar"),
    ("FO4-O-BAR",  True,  "Fo4OBar"),
    ("foo",        True,  "Foo"),
    ("FOO",        True,  "Foo"),
    ("foo-b",      True,  "FooB"),
    ("FOO-B",      True,  "FooB"),
    ("foo-b4",     True,  "FooB4"),
    ("FOO-B4",     True,  "FooB4"),
    ("foo-bar",    True,  "FooBar"),
    ("FOO-BAR",    True,  "FooBar"),
    ("foo-bar4",   True,  "FooBar4"),
    ("FOO-BAR4",   True,  "FooBar4"),
    ("foo4",       True,  "Foo4"),
    ("FOO4",       True,  "Foo4"),
    ("foo4-b",     True,  "Foo4B"),
    ("FOO4-b",     True,  "Foo4B"),
    ("foo4-bar",   True,  "Foo4Bar"),
    ("FOO4-bar",   True,  "Foo4Bar"),
    ("foob",       True,  "Foob"),
    ("FOOB",       True,  "Foob"),
    ("foob4",      True,  "Foob4"),
    ("FOOB4",      True,  "Foob4"),
    ("",           False,  ""),
    ("4",          False,  "4"),
    ("4-f",        False,  "4F"),
    ("4-F",        False,  "4F"),
    ("4-fo-o-bar", False,  "4FoOBar"),
    ("4-FO-O-BAR", False,  "4FoOBar"),
    ("4-foo",      False,  "4Foo"),
    ("4-FOO",      False,  "4Foo"),
    ("4-foo-b",    False,  "4FooB"),
    ("4-FOO-B",    False,  "4FooB"),
    ("4-foo-bar",  False,  "4FooBar"),
    ("4-FOO-BAR",  False,  "4FooBar"),
    ("4-foob",     False,  "4Foob"),
    ("4-FOOB",     False,  "4Foob"),
    ("f",          False,  "f"),
    ("F",          False,  "f"),
    ("f4",         False,  "f4"),
    ("F4",         False,  "f4"),
    ("fo-o-bar",   False,  "foOBar"),
    ("FO-O-BAR",   False,  "foOBar"),
    ("fo-o-bar4",  False,  "foOBar4"),
    ("FO-O-BAR4",  False,  "foOBar4"),
    ("fo-o4-bar",  False,  "foO4Bar"),
    ("FO-O4-BAR",  False,  "foO4Bar"),
    ("fo4-o-bar",  False,  "fo4OBar"),
    ("FO4-O-BAR",  False,  "fo4OBar"),
    ("foo",        False,  "foo"),
    ("FOO",        False,  "foo"),
    ("foo-b",      False,  "fooB"),
    ("FOO-B",      False,  "fooB"),
    ("foo-b4",     False,  "fooB4"),
    ("FOO-B4",     False,  "fooB4"),
    ("foo-bar",    False,  "fooBar"),
    ("FOO-BAR",    False,  "fooBar"),
    ("foo-bar4",   False,  "fooBar4"),
    ("FOO-BAR4",   False,  "fooBar4"),
    ("foo4",       False,  "foo4"),
    ("FOO4",       False,  "foo4"),
    ("foo4-b",     False,  "foo4B"),
    ("FOO4-b",     False,  "foo4B"),
    ("foo4-bar",   False,  "foo4Bar"),
    ("FOO4-bar",   False,  "foo4Bar"),
    ("foob",       False,  "foob"),
    ("FOOB",       False,  "foob"),
    ("foob4",      False,  "foob4"),
    ("FOOB4",      False,  "foob4"),
])
# fmt: on
def test_kebab2camel_expected(string: str, capitalize: bool, expected: str):
    """Test :func:`none.text.case.kebab2camel` for expected output."""
    assert none.text.case.kebab2camel(string, capitalize=capitalize) == expected


# fmt: off
@pytest.mark.parametrize("string,expected", [
    ("",           ""),
    ("4",          "4"),
    ("4-f",        "4_f"),
    ("4-F",        "4_F"),
    ("4-fo-o-bar", "4_fo_o_bar"),
    ("4-FO-O-BAR", "4_FO_O_BAR"),
    ("4-foo",      "4_foo"),
    ("4-FOO",      "4_FOO"),
    ("4-foo-b",    "4_foo_b"),
    ("4-FOO-B",    "4_FOO_B"),
    ("4-foo-bar",  "4_foo_bar"),
    ("4-FOO-BAR",  "4_FOO_BAR"),
    ("4-foob",     "4_foob"),
    ("4-FOOB",     "4_FOOB"),
    ("f",          "f"),
    ("F",          "F"),
    ("f4",         "f4"),
    ("F4",         "F4"),
    ("fo-o-bar",   "fo_o_bar"),
    ("FO-O-BAR",   "FO_O_BAR"),
    ("fo-o-bar4",  "fo_o_bar4"),
    ("FO-O-BAR4",  "FO_O_BAR4"),
    ("fo-o4-bar",  "fo_o4_bar"),
    ("FO-O4-BAR",  "FO_O4_BAR"),
    ("fo4-o-bar",  "fo4_o_bar"),
    ("FO4-O-BAR",  "FO4_O_BAR"),
    ("foo",        "foo"),
    ("FOO",        "FOO"),
    ("foo-b",      "foo_b"),
    ("FOO-B",      "FOO_B"),
    ("foo-b4",     "foo_b4"),
    ("FOO-B4",     "FOO_B4"),
    ("foo-bar",    "foo_bar"),
    ("FOO-BAR",    "FOO_BAR"),
    ("foo-bar4",   "foo_bar4"),
    ("FOO-BAR4",   "FOO_BAR4"),
    ("foo4",       "foo4"),
    ("FOO4",       "FOO4"),
    ("foo4-b",     "foo4_b"),
    ("FOO4-b",     "FOO4_b"),
    ("foo4-bar",   "foo4_bar"),
    ("FOO4-bar",   "FOO4_bar"),
    ("foob",       "foob"),
    ("FOOB",       "FOOB"),
    ("foob4",      "foob4"),
    ("FOOB4",      "FOOB4"),
])
# fmt: on
def test_kebab2snake_expected(string: str, expected: str):
    """Test :func:`none.text.case.kebab2snake` for expected output."""
    assert none.text.case.kebab2snake(string) == expected


# fmt: off
@pytest.mark.parametrize("string,capitalize,expected", [
    ("",           True,  ""),
    ("4",          True,  "4"),
    ("4_f",        True,  "4F"),
    ("4_F",        True,  "4F"),
    ("4_fo_o_bar", True,  "4FoOBar"),
    ("4_FO_O_BAR", True,  "4FoOBar"),
    ("4_foo",      True,  "4Foo"),
    ("4_FOO",      True,  "4Foo"),
    ("4_foo_b",    True,  "4FooB"),
    ("4_FOO_B",    True,  "4FooB"),
    ("4_foo_bar",  True,  "4FooBar"),
    ("4_FOO_BAR",  True,  "4FooBar"),
    ("4_foob",     True,  "4Foob"),
    ("4_FOOB",     True,  "4Foob"),
    ("f",          True,  "F"),
    ("F",          True,  "F"),
    ("f4",         True,  "F4"),
    ("F4",         True,  "F4"),
    ("fo_o_bar",   True,  "FoOBar"),
    ("FO_O_BAR",   True,  "FoOBar"),
    ("fo_o_bar4",  True,  "FoOBar4"),
    ("FO_O_BAR4",  True,  "FoOBar4"),
    ("fo_o4_bar",  True,  "FoO4Bar"),
    ("FO_O4_BAR",  True,  "FoO4Bar"),
    ("fo4_o_bar",  True,  "Fo4OBar"),
    ("FO4_O_BAR",  True,  "Fo4OBar"),
    ("foo",        True,  "Foo"),
    ("FOO",        True,  "Foo"),
    ("foo_b",      True,  "FooB"),
    ("FOO_B",      True,  "FooB"),
    ("foo_b4",     True,  "FooB4"),
    ("FOO_B4",     True,  "FooB4"),
    ("foo_bar",    True,  "FooBar"),
    ("FOO_BAR",    True,  "FooBar"),
    ("foo_bar4",   True,  "FooBar4"),
    ("FOO_BAR4",   True,  "FooBar4"),
    ("foo4",       True,  "Foo4"),
    ("FOO4",       True,  "Foo4"),
    ("foo4_b",     True,  "Foo4B"),
    ("FOO4_b",     True,  "Foo4B"),
    ("foo4_bar",   True,  "Foo4Bar"),
    ("FOO4_bar",   True,  "Foo4Bar"),
    ("foob",       True,  "Foob"),
    ("FOOB",       True,  "Foob"),
    ("foob4",      True,  "Foob4"),
    ("FOOB4",      True,  "Foob4"),
    ("",           False,  ""),
    ("4",          False,  "4"),
    ("4_f",        False,  "4F"),
    ("4_F",        False,  "4F"),
    ("4_fo_o_bar", False,  "4FoOBar"),
    ("4_FO_O_BAR", False,  "4FoOBar"),
    ("4_foo",      False,  "4Foo"),
    ("4_FOO",      False,  "4Foo"),
    ("4_foo_b",    False,  "4FooB"),
    ("4_FOO_B",    False,  "4FooB"),
    ("4_foo_bar",  False,  "4FooBar"),
    ("4_FOO_BAR",  False,  "4FooBar"),
    ("4_foob",     False,  "4Foob"),
    ("4_FOOB",     False,  "4Foob"),
    ("f",          False,  "f"),
    ("F",          False,  "f"),
    ("f4",         False,  "f4"),
    ("F4",         False,  "f4"),
    ("fo_o_bar",   False,  "foOBar"),
    ("FO_O_BAR",   False,  "foOBar"),
    ("fo_o_bar4",  False,  "foOBar4"),
    ("FO_O_BAR4",  False,  "foOBar4"),
    ("fo_o4_bar",  False,  "foO4Bar"),
    ("FO_O4_BAR",  False,  "foO4Bar"),
    ("fo4_o_bar",  False,  "fo4OBar"),
    ("FO4_O_BAR",  False,  "fo4OBar"),
    ("foo",        False,  "foo"),
    ("FOO",        False,  "foo"),
    ("foo_b",      False,  "fooB"),
    ("FOO_B",      False,  "fooB"),
    ("foo_b4",     False,  "fooB4"),
    ("FOO_B4",     False,  "fooB4"),
    ("foo_bar",    False,  "fooBar"),
    ("FOO_BAR",    False,  "fooBar"),
    ("foo_bar4",   False,  "fooBar4"),
    ("FOO_BAR4",   False,  "fooBar4"),
    ("foo4",       False,  "foo4"),
    ("FOO4",       False,  "foo4"),
    ("foo4_b",     False,  "foo4B"),
    ("FOO4_b",     False,  "foo4B"),
    ("foo4_bar",   False,  "foo4Bar"),
    ("FOO4_bar",   False,  "foo4Bar"),
    ("foob",       False,  "foob"),
    ("FOOB",       False,  "foob"),
    ("foob4",      False,  "foob4"),
    ("FOOB4",      False,  "foob4"),
])
# fmt: on
def test_snake2camel_expected(string: str, capitalize: bool, expected: str):
    """Test :func:`none.text.case.snake2camel` for expected output."""
    assert none.text.case.snake2camel(string, capitalize=capitalize) == expected


# fmt: off
@pytest.mark.parametrize("string,expected", [
    ("",           ""),
    ("4",          "4"),
    ("4_f",        "4-f"),
    ("4_F",        "4-F"),
    ("4_fo_o_bar", "4-fo-o-bar"),
    ("4_FO_O_BAR", "4-FO-O-BAR"),
    ("4_foo",      "4-foo"),
    ("4_FOO",      "4-FOO"),
    ("4_foo_b",    "4-foo-b"),
    ("4_FOO_B",    "4-FOO-B"),
    ("4_foo_bar",  "4-foo-bar"),
    ("4_FOO_BAR",  "4-FOO-BAR"),
    ("4_foob",     "4-foob"),
    ("4_FOOB",     "4-FOOB"),
    ("f",          "f"),
    ("F",          "F"),
    ("f4",         "f4"),
    ("F4",         "F4"),
    ("fo_o_bar",   "fo-o-bar"),
    ("FO_O_BAR",   "FO-O-BAR"),
    ("fo_o_bar4",  "fo-o-bar4"),
    ("FO_O_BAR4",  "FO-O-BAR4"),
    ("fo_o4_bar",  "fo-o4-bar"),
    ("FO_O4_BAR",  "FO-O4-BAR"),
    ("fo4_o_bar",  "fo4-o-bar"),
    ("FO4_O_BAR",  "FO4-O-BAR"),
    ("foo",        "foo"),
    ("FOO",        "FOO"),
    ("foo_b",      "foo-b"),
    ("FOO_B",      "FOO-B"),
    ("foo_b4",     "foo-b4"),
    ("FOO_B4",     "FOO-B4"),
    ("foo_bar",    "foo-bar"),
    ("FOO_BAR",    "FOO-BAR"),
    ("foo_bar4",   "foo-bar4"),
    ("FOO_BAR4",   "FOO-BAR4"),
    ("foo4",       "foo4"),
    ("FOO4",       "FOO4"),
    ("foo4_b",     "foo4-b"),
    ("FOO4_b",     "FOO4-b"),
    ("foo4_bar",   "foo4-bar"),
    ("FOO4_bar",   "FOO4-bar"),
    ("foob",       "foob"),
    ("FOOB",       "FOOB"),
    ("foob4",      "foob4"),
    ("FOOB4",      "FOOB4"),
])
# fmt: on
def test_snake2kebab_expected(string: str, expected: str):
    """Test :func:`none.text.case.snake2kebab` for expected output."""
    assert none.text.case.snake2kebab(string) == expected
